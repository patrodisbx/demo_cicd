name: CI

on:
  push:
    branch: [feature1]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.list_file.outputs.value}}
      
    steps:
      - name: check out repo
        uses: actions/checkout@v2

      - name: Get Diff Action
        uses: technote-space/get-diff-action@v6
        with:
          format: JSON

      - name: Filter files for graphs and operators only  
        run: |
          res=$(echo '${{ env.GIT_DIFF }}' | jq '.[] | select(. | contains("graph.json") or contains("operator.json"))' | jq -Rsc '. / "\n" - [""]')
          echo "filtered_op=$res" >> $GITHUB_ENV
        shell: bash

      - name: Passing the final output to build
        id: list_file
        run: echo '::set-output name=value::${{ env.filtered_op }}'

  build:
    needs: [setup]
    runs-on: windows-latest
    strategy: 
      matrix: 
        value: ${{fromJson(needs.setup.outputs.matrix)}}
        exclude:
          - value: .github/workflows/CI.yml
          - value: vctl/vctl.exe
    
    steps:
      - name: Checking out current git repository
        uses: actions/checkout@v2

      - name: Capturing the solution name to bundle
        run: echo "obj_name=$(echo ${{ matrix.value }} | cut --complement -d "/" -f 2)" >> $GITHUB_ENV
        shell: bash
  
      - name: Log-in to DI through vctl
        run: vctl\vctl.exe login https://vsystem.ingress.dh-ifc1k6ng.di-us-east.shoot.live.k8s-hana.ondemand.com disbxt01 ${{secrets.USER_NAME}} -p ${{secrets.PASSWORD}}

      - name: Defining the target directory for solution
        run: |
          echo "target_dir=$(echo  ${{ matrix.value }} | sed "s/graph.json/content\/files\/vflow\/graphs\/Test\/${{env.obj_name}}/g")" >> $GITHUB_ENV
        shell: bash

      - name: Building the solution directory structure 
        run: | 
          result=$(find ${{env.obj_name}} -type d -name launchConfigs)
          if [[ -n $result ]]; then
            mkdir -p ${{env.target_dir}}/launchConfigs
            mv -f ./${{ matrix.value }} ./${{env.target_dir}}
            mv -f ./${{ env.obj_name }}/launchConfigs/* ./${{env.target_dir}}/launchConfigs
          else 
            mkdir -p ${{env.target_dir}}
            mv -f ./${{ matrix.value }} ./${{env.target_dir}}
          fi
        shell: bash
   
      - name: Bundle the solution into zip file in current working directory
        run: vctl\vctl.exe solution bundle ${{env.obj_name}}

      # - name: Capture the solution version post bundle
      #   run: |
      #     echo "zip_name=$(ls | sed -n 's/\.zip$//p')" >> $GITHUB_ENV
      #   shell: bash
      
      # - name: Get list of solutions from the strategy 
      #   run: |
      #     vctl\vctl.exe strategy get sdi-disbxt01-extension-strategy -o "json" | Out-File ./input.json
      
      # - name: Look up this solution version in list found in above step
      #   run: |
      #     jarray=$(cat ./input.json | jq '.layers')
      #     obj_arr=$(echo $jarray | jq -c -r '.[]')
      #     echo "sol_exist_flag=$(echo "NO")" >> $GITHUB_ENV
      #     flag=0
      #     for obj in ${obj_arr[*]}
      #     do
      #       val=$(echo $obj)
      #       if [ "$val" = "${{env.zip_name}}" ]; then
      #         echo "sol_exist_flag=$(echo "YES")" >> $GITHUB_ENV
      #         flag=1
      #       fi
      #     done
      #     if [ $flag -eq 1 ]; then
      #       echo "This solution ${{env.zip_name}} version already exists in strategy."
      #     else 
      #       echo "This solution ${{env.zip_name}} version doesn't exists in strategy."
      #     fi
      #   shell: bash

      # - name: Remove the solution version from strategy if already exists
      #   if: ${{ env.sol_exist_flag == 'YES' }}
      #   run: vctl\vctl.exe strategy remove sdi-disbxt01-extension-strategy ${{env.zip_name}}

      # - name: Delete same existing solution version from tenant if already exists
      #   if: ${{ env.sol_exist_flag == 'YES' }}
      #   run: vctl\vctl.exe solution delete $(echo ${{env.zip_name}} | cut -d "-" -f 1) $(echo ${{env.zip_name}} | cut -d "-" -f 2)

      # - name: Uploading updated solution version to tenant
      #   run: vctl\vctl.exe solution upload ${{env.zip_name}}.zip

      # - name: Adding updated solution version to Strategy
      #   run: vctl\vctl.exe strategy add sdi-disbxt01-extension-strategy ${{env.zip_name}}

   
 
 
        
